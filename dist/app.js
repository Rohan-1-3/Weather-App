(()=>{"use strict";const e=async e=>`https://flagcdn.com/w20/${e}.png`,t=document.querySelector("#location-name"),n=document.querySelector("#submit"),o=document.querySelector(".main"),a=document.querySelector("#description"),r=document.querySelector("#location-address"),c=document.querySelector("#humidity"),i=document.querySelector("#temp"),s=document.querySelector("#feels-like"),d=document.querySelector("#wind"),u=document.querySelector("#min-max");t.value="nepal";const m=document.querySelector(".temp-type");(()=>{const l=async()=>{if(""===t.value)return alert("enter the name of city"),!1;m.checked=!1;const n=await async function(e){const t=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${e}&units=metric&appid=d02ff9591aed8d0a11368b857174ac68`,{mode:"cors"}),n=await t.json();return 200!==n.cod?(alert("No such City or Country!"),!1):n}(t.value),l=n.weather[0].description.split(" "),p=[];for(let e=0;e<l.length;e+=1)p[e]=l[e][0].toUpperCase()+l[e].substr(1).toLowerCase();const y=new Image,C=await e(n.sys.country.toLowerCase());console.log(C),y.classList.add("flag"),y.src=C;const h=await(async e=>{const t=await fetch(`https://api.giphy.com/v1/gifs/translate?api_key=eBhEdHXogjan6ex7lTVAjDCUmubhMM6C&s=${e}`,{mode:"cors"});return(await t.json()).data.images.original.url})(`weather ${p.join(" ")}`);o.style.backgroundImage=`url(${h})`;let x=n.main.temp,$=n.main.feels_like,w=n.main.temp_min,g=n.main.temp_max;a.textContent=p.join(" "),r.textContent=`${n.name}, ${n.sys.country}`,r.appendChild(y),c.textContent=`Humidity: ${n.main.humidity}`,i.textContent=`${Math.round(x)}°C`,s.textContent=`Feels Like: ${$}°C`,d.textContent=`Wind Speed: ${n.wind.speed} Km/hr`,u.textContent=`Temperature(Min/Max): ${w}°C/${g}°C`,t.value="";const f=e=>(9*e/5+32).toFixed(2),k=e=>(5*(e-32)/9).toFixed(2);return m.addEventListener("click",(()=>{!0===m.checked?(i.textContent=`${Math.round(f(x))}°F`,s.textContent=`Feels Like: ${f($)}°F`,u.textContent=`Temperature(Min/Max): ${f(w)}°F/\n                ${f(g)}°F`,x=Math.round(f(x)),$=f($),w=f(w),g=f(g)):(i.textContent=`${Math.round(k(x))}°C`,s.textContent=`Feels Like: ${k($)}°C`,u.textContent=`Temperature(Min/Max): ${k(w)}°C/\n                ${k(g)}°C`,x=Math.round(k(x)),$=k($),w=k(w),g=k(g))})),0};n.addEventListener("click",(()=>{l()})),t.addEventListener("keydown",(e=>{13===e.keyCode&&l()})),l()})(),e()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,